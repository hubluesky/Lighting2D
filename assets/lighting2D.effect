// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - passes:
    - vert: vs:vert
      frag: fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
      properties:
        lightDirection: { value: [0, 1] }
        lightAngle: { value: 0.5235987755982988 }
        lightRadius: { value: 88 }
        lightRadiusFade: { value: 0 }
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  out vec3 v_position;

  in vec4 a_color;
  out vec4 v_color;

  in float a_dist;
  out float v_dist;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    v_position = a_position;
    pos = cc_matViewProj * cc_matWorld * pos;

    v_color = a_color;
    v_dist = a_dist;

    return pos;
  }
}%

CCProgram fs %{
  #pragma extension([GL_OES_standard_derivatives, __VERSION__ < 300])

  precision highp float;

  #include <alpha-test>

  in vec4 v_color;
  in vec3 v_position;
  in float v_dist;

  uniform Uniform {
    vec2 lightDirection;
    float lightAngle;
    float lightRadius;
    float lightRadiusFade;
  };

  vec4 frag () {
    vec4 o = v_color;

    vec2 np = normalize(v_position.xy);
    float angle = acos(dot(np, lightDirection));
    o.a *= 1. - step(lightAngle, angle);

    float d = length(v_position);
    float fade = 1. - smoothstep(lightRadius - lightRadiusFade, lightRadius, d);
    o.a *= fade;
    // o.rgb *= fade;

    // #if __VERSION__ < 300
    //   #ifdef GL_OES_standard_derivatives
    //     float aa = fwidth(v_dist);
    //   #else
    //     float aa = 0.05;
    //   #endif
    // #else
    //   float aa = fwidth(v_dist);
    // #endif

    // float alpha = 1. - smoothstep(-aa, 0., abs(v_dist) - 1.0);
    // o.rgb *= o.a;
    // o *= alpha;

    // ALPHA_TEST(o);
    return o;
  }
}%
